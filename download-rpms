#!/bin/ksh

# Not used but left as an example.
# Only looks at release versions in package cloud so is inferior to adding the repos into yum's config

PATH=/scripts:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:$PATH

SCRIPTNAME=$0
SCRIPTDIR=$(dirname "$SCRIPTNAME")
VERSIONFILE=$SCRIPTDIR/tyk-versions.list

function help {
  echo "[USAGE] $SCRIPTNAME -g tyk-version -h"
  echo "        -g tyk gateway version to pull download"
  echo "        -l list version of components that go with each GW version"
  echo "        -h print this help"
}

if [[ $# -lt 1 ]]; then
  help
  exit 1
fi

typeset -A GATEWAY
typeset -A DASHBOARD
typeset -A TIB
typeset -A PUMP
typeset -A SYNC

function loadVersions {
  typeset line
  typeset IFS
  typeset gwVers
  typeset dshbVers
  typeset pumpVers
  typeset TIBvers
  typeset syncVers
  line=$1
  IFS=,
  echo "$line" | read version gwVers dshbVers pumpVers TIBvers syncVers
  GATEWAY[$version]=$gwVers
  DASHBOARD[$gwVers]=$dshbVers
  PUMP[$gwVers]=$pumpVers
  TIB[$gwVers]=$TIBvers
  SYNC[$gwVers]=$syncVers
}

function loadVersionFile {
  typeset line
  for line in $(awk 'NF && !/#/' $VERSIONFILE); do
    loadVersions "$line"
  done
}

function listversions {
  typeset gwVersion
  for version in $(echo ${!GATEWAY[@]} | xargs -n 1 | sort -rV); do
    gwVersion=${GATEWAY[$version]}
    echo "Version:   $version"
    echo "    Gateway:   $gwVersion"
    [[ ${DASHBOARD[$gwVersion]+_} ]] && echo "    Dashboard: ${DASHBOARD[$gwVersion]}"
    [[ ${TIB[$gwVersion]+_} ]] && echo "    TIB:       ${TIB[$gwVersion]}"
    [[ ${PUMP[$gwVersion]+_} ]] && echo "    Pump:      ${PUMP[$gwVersion]}"
  done
}

function download {
  typeset rpm=$1
  typeset url=$2
  echo "[INFO]Downloading $rpm from $url"
  if [[ ! -f $rpm ]]; then
    curl -sL $url --output $rpm
    if [[ $? -gt 0 ]]; then
      rm $rpm
      echo "[WARN]Failed to pull $rpm"
    else
      echo "[INFO]Pulled $rpm"
    fi
  else
    echo "[WARN]$rpm already exists"
  fi
}

loadVersionFile

while getopts :g:hl arg; do
  case $arg in
  l)
    listversions
    exit 0
    ;;
  g)
    version=$OPTARG
    ;;
  h)
    help
    exit 0
    ;;
  :)
    echo "Option -$OPTARG requires an argument."
    exit 1
    ;;
  \?)
    echo "Invalid option: -$OPTARG"
    exit 1
    ;;
  esac
done

if [[ ${GATEWAY[$version]+_} ]]; then
  tykVersion=${GATEWAY[$version]}
  dshbVersion=${DASHBOARD[$tykVersion]}
  tibVersion=${TIB[$tykVersion]}
  pumpVersion=${PUMP[$tykVersion]}
else
  echo "Unknown version"
  help
  exit 1
fi

if [[ -n $tykVersion ]]; then
  rpm="tyk-gateway-$tykVersion.x86_64.rpm"
  url="https://packagecloud.io/tyk/tyk-gateway/packages/el/7/$rpm/download.rpm"
  download $rpm $url
fi

if [[ -n $dshbVersion ]]; then
  rpm="tyk-dashboard-$dshbVersion.x86_64.rpm"
  url="https://packagecloud.io/tyk/tyk-dashboard/packages/el/7/$rpm/download.rpm"
  download $rpm $url
fi

if [[ -n $tibVersion ]]; then
  rpm="tyk-identity-broker-$tibVersion.x86_64.rpm"
  url="https://packagecloud.io/tyk/tyk-identity-broker/packages/el/7/$rpm/download.rpm"
  download $rpm $url
fi

if [[ -n $pumpVersion ]]; then
  rpm="tyk-pump-$pumpVersion.x86_64.rpm"
  url="https://packagecloud.io/tyk/tyk-pump/packages/el/7/$rpm/download.rpm"
  download $rpm $url
fi
